void ADC_Init(void) {
    // Enable clock for ADC1 and GPIOA
    RCC->APB2ENR |= (1 << 9) | (1 << 2)  | RCC_APB2ENR_AFIOEN;

    // Configure PA0, PA1, PA2 as analog input
    GPIOA->CRL &= ~((0xF << (4 * 0)) | (0xF << (4 * 1)) | (0xF << (4 * 2)));
    
    // ADC1 configuration
		RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
    ADC1->CR2 |= (1 << 0); // Enable ADC1
    ADC1->CR2 |= (1 << 3); // Enable ADC calibration
    while (ADC1->CR2 & (1 << 3)); // Wait for calibration to complete

    // Set sample time for channels 0, 1, 2
    ADC1->SMPR2 |= (7 << (3 * 0)) | (7 << (3 * 1)) | (7 << (3 * 2)); // Sample time 55.5 cycles for channels 0, 1, 2
}

uint16_t ADC_Read(uint8_t channel) {
    // Select the ADC channel
    ADC1->SQR3 = channel;

    // Start conversion
    ADC1->CR2 |= 1;

    // Wait for conversion to complete
    while (!(ADC1->SR & (1 << 1)));

    // Read conversion result
    return ADC1->DR;
}

void uart1Enable(void)
{
	
	RCC->APB2ENR |= 0x4005;
	GPIOA->CRH &= 0xFFFFFF0F;
	GPIOA->CRH |= 0x000000B0;
	USART1->BRR = 625;
	USART1->CR1 = 0x200C;
}

void USART1_SendString(char *ch) {
    //char buffer[20];
    //sprintf(buffer, "%f\n", f);
    for (int i = 0; ch[i] != '\0'; i++) {
        // Wait until data register is empty
        while (!(USART1->SR & USART_SR_TXE));
        // Send character
        USART1->DR = ch[i];
    }
		while (!(USART1->SR & USART_SR_TXE)){};
        // Send character
        USART1->DR = '\n';
}

void USART1_SendFloat(float f) {
    char buffer[20];
    sprintf(buffer, "%f\n", f);
    for (int i = 0; buffer[i] != '\0'; i++) {
        // Wait until data register is empty
        while (!(USART1->SR & USART_SR_TXE));
        // Send character
        USART1->DR = buffer[i];
    }
}

void uart2Enable(void)
{
	RCC->APB1ENR |= (1<<17);
	GPIOA->CRL &= 0xFFFFF0FF;
	GPIOA->CRL |= 0x00000B00;
	USART2->BRR = 3750;
	USART2->CR1 = 0x200C;
}


void USART2_SendFloat(float f) {
    char buffer[20];
    sprintf(buffer, "%f\n", f);
    for (int i = 0; buffer[i] != '\0'; i++) {
        // Wait until data register is empty
        while (!(USART2->SR & USART_SR_TXE));
        // Send character
        USART2->DR = buffer[i];
    }
}